prometheusOperator:
  enabled: true
  admissionWebhooks:
    enabled: false
  tls:
    enabled: false
  resources:
    limits:
      cpu: 300m
      memory: 200Mi
    requests:
      cpu: 200m
      memory: 100Mi
  # prometheusSpec:
  #   podMonitorSelectorNilUsesHelmValues: false
  #   probeSelectorNilUsesHelmValues: false
  #   ruleSelectorNilUsesHelmValues: false
  #   serviceMonitorSelectorNilUsesHelmValues: false
  #   ## Example which selects PodMonitors with label "prometheus" set to "somelabel"
    # podMonitorSelector:
    #    matchLabels:
    #     app: strimzi


prometheus:
  emabled: true
  prometheusSpec:
    podMonitorSelector:
      matchLabels:
        app: strimzi

grafana:
  enabled: true
  namespaceOverride: ""
  env:
    # GF_SERVER_ROOT_URL: http://192.168.15.160/grafana
    # GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
  grafana.ini:
    server:
      domain: http://192.168.15.160
      root_url: http://192.168.15.160/grafana/
      # serve_from_sub_path: true
  ## Image and version of grafana. If not provided (left commented out) default values from grafana charts will be used.
  ##
  # image:
  #   repository: docker.io/grafana/grafana
  #   tag: 9.0.6
  #   sha: ""
  #   pullPolicy: IfNotPresent

  ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
  ##
  forceDeployDatasources: false

  ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
  ##
  forceDeployDashboards: false

  ## Deploy default dashboards
  ##
  defaultDashboardsEnabled: true

  ## Timezone for the default dashboards
  ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
  ##
  defaultDashboardsTimezone: utc

  adminPassword: prom-operator

  rbac:
    ## If true, Grafana PSPs will be created
    ##
    pspEnabled: false

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: false

    ## IngressClassName for Grafana Ingress.
    ## Should be provided if Ingress is enable.
    ##
    ingressClassName: nginx

    ## Annotations for Grafana Ingress
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    ## Labels to be added to the Ingress
    ##
    labels: {}

    ## Hostnames.
    ## Must be provided if Ingress is enable.
    ##
    # hosts:
    #   - grafana.domain.com
    hosts:
      - grafana.192.168.15.160.nip.io

    ## Path for grafana ingress
    path: /grafana/
    pathType: ImplementationSpecific

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls: []
    # - secretName: grafana-general-tls
    #   hosts:
    #   - grafana.example.com

  sidecar:
    ## Image and version of sidecar. If not provided (left commented out) default values from grafana charts will be used.
    ##
    # image:
    #   repository: quay.io/kiwigrid/k8s-sidecar
    #   tag: 1.19.2
    #   sha: ""

    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"

      ## Annotations for Grafana dashboard configmaps
      ##
      annotations: {}
      multicluster:
        global:
          enabled: false
        etcd:
          enabled: false
      provider:
        allowUiUpdates: false
    datasources:
      enabled: true
      defaultDatasourceEnabled: true

      uid: prometheus

      ## URL of prometheus datasource
      ##
      # url: http://prometheus-stack-prometheus:9090/

      # If not defined, will use prometheus.prometheusSpec.scrapeInterval or its default
      # defaultDatasourceScrapeInterval: 15s

      ## Annotations for Grafana datasource configmaps
      ##
      annotations: {}

      ## Create datasource for each Pod of Prometheus StatefulSet;
      ## this uses headless service `prometheus-operated` which is
      ## created by Prometheus Operator
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/0fee93e12dc7c2ea1218f19ae25ec6b893460590/pkg/prometheus/statefulset.go#L255-L286
      createPrometheusReplicasDatasources: false
      label: grafana_datasource
      labelValue: "1"

      ## Field with internal link pointing to existing data source in Grafana.
      ## Can be provisioned via additionalDataSources
      exemplarTraceIdDestinations: {}
        # datasourceUid: Jaeger
        # traceIdLabelName: trace_id