global:
  ##  serviceAccountName -- Service Account name override
  # serviceAccountName: &service-account-name "airbyte-admin"
  state:
    ## state.storage.type Determines which state storage will be utilized.  One of "MINIO", "S3" or "GCS"
    storage:
      type: "S3"

  logs:
    accessKey:
      password: ""
      existingSecret: ""
      existingSecretKey: ""

    secretKey:
      password: ""
      existingSecret: ""
      existingSecretKey: ""

    minio:
      enabled: false

    externalMinio:
      enabled: false
      host: localhost
      port: 9000

    storage:
      type: "S3"

    s3:
      enabled: true
      bucket: ${logs_bucket_name}
      bucketRegion: "us-east-1"

  jobs:
    resources:
      requests:
        cpu: 800m
        memory: 2.1Gi
      limits:
        cpu: 800m
        memory: 2.1Gi

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##  serviceAccount.annotations -- [object] Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
##  serviceAccount.create -- Specifies whether a ServiceAccount should be created
##  serviceAccount.name -- Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
##
serviceAccount:
  create: true
  # annotations: {}
  # name: *service-account-name

server:
  enabled: true
  replicaCount: 2
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      value: '${AWS_ACCESS_KEY_ID}'
    - name: AWS_SECRET_ACCESS_KEY
      value: '${AWS_SECRET_ACCESS_KEY}'
  service:
    type: ClusterIP
    port: 8001
  resources:
    requests:
      memory: 700Mi
    limits:
      memory: 700Mi

worker:
  image:
    repository: kleinkauff/airbyte-worker-arm
    pullPolicy: IfNotPresent
  enabled: true
  replicaCount: 1
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      value: '${AWS_ACCESS_KEY_ID}'
    - name: AWS_SECRET_ACCESS_KEY
      value: '${AWS_SECRET_ACCESS_KEY}'
  hpa:
    enabled: false
  resources:
    requests:
      cpu: 300m
      memory: 550Mi
    limits:
      cpu: 1000m
      memory: 550Mi

webapp:
  enabled: true
  replicaCount: 1
  image:
    repository: airbyte/webapp
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    annotations: {}
  ingress:
    enabled: false
    # className: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
    - host: ""
      paths:
      - path: /airbyte
        pathType: ImplementationSpecific
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #   - chart-example.local
  api:
    url: /api/v1/
  resources:
    requests:
      memory: 40Mi
    limits:
      memory: 40Mi
  extraEnv:
    - name: BASIC_AUTH_USERNAME
      value: "jhonatas"
    - name: BASIC_AUTH_PASSWORD
      value: "kleinkauff"
  # extraVolumes:
  #   - name: basic-auth
  #     secret:
  #       secretName: basic-auth
  #   - name: default-conf-nginx
  #     configMap:
  #       name: default-conf-nginx
  # extraVolumeMounts:
  #   - name: basic-auth
  #     mountPath: /etc/nginx/nginx-auth.conf
  #     readOnly: true
  #   - name: default-conf-nginx
  #     mountPath: /etc/nginx/nginx.conf

pod-sweeper:
  enabled: true
  image:
    repository: portainer/kubectl-shell
    pullPolicy: IfNotPresent
    tag: latest

temporal:
  replicaCount: 1
  image:
    tag: "1.13.0-arm64"
    pullPolicy: IfNotPresent

minio:
  enabled: false

cron:
  enabled: false

airbyte-bootloader:
  enabled: true

postgresql:
  enabled: false

externalDatabase:
  host: ${db_host}
  user: postgres #user_airbyte
  password: super_pwd #airbyte
  database: ${db_name}
  port: 5432